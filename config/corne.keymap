/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
//Layers 

#define Base 0
#define Lower 1
#define Raise 2
#define Funct 3

// #define block
// #define SCSH &kp LS(LG(NUMBER_4))

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lslc: lslc {
            compatible = "zmk,behavior-tap-dance";
            label = "LSLC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_SHIFT>, <&kp LCTRL>;
        };

        rsra: rsra {
            compatible = "zmk,behavior-tap-dance";
            label = "RSRA";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RIGHT_SHIFT>, <&kp RALT>;
        };

        mo13: mo13 {
            compatible = "zmk,behavior-tap-dance";
            label = "MO13";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 0>;
        };
    };

    macros {
        ae: ae {
            compatible = "zmk,behavior-macro";
            label = "AE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp A>;
        };

        oe: oe {
            compatible = "zmk,behavior-macro";
            label = "OE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp O>;
        };

        ue: ue {
            compatible = "zmk,behavior-macro";
            label = "UE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp U>;
        };
    };

    combos {
        compatible = "zmk,combos";

        FunctSwitch {
            bindings = <&kp CAPSLOCK>;
            key-positions = <37 40>;
        };

        EngCombo {
            bindings = <&kp LS(LA(KP_NUMBER_1))>;
            key-positions = <1 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E         &kp R                   &kp T  &kp Y  &kp U      &kp I      &kp O    &kp P     &kp A
&kp LEFT_SHIFT    &kp A  &kp S  &kp D         &kp F                   &kp G  &kp H  &kp J      &kp K      &kp L    &kp SEMI  &kp APOS
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C         &kp V                   &kp B  &kp N  &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp BACKSPACE
                                &kp LEFT_ALT  &mt LEFT_COMMAND SPACE  &mo 1  &mo 2  &kp SPACE  &kp ENTER
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
&kp ESC  &trans  &trans          &trans          &trans           &trans  &kp APOSTROPHE     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS   &kp DEL
&trans   &trans  &trans          &kp UP_ARROW    &trans           &trans  &kp DOUBLE_QUOTES  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS  &kp RETURN
&trans   &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans             &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp EQUAL  &trans
                                 &trans          &none            &none   &none              &none         &kp NUMBER_0
            >;
        };

        raise_layer {
            label = "Raise";
            bindings = <
&kp ESC         &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&trans          &ae       &trans  &oe       &ue       &trans     &kp GRAVE  &kp MINUS  &kp BSLH         &kp LBKT  &kp RBKT  &kp RETURN
&bt BT_CLR_ALL  &trans    &trans  &trans    &trans    &trans     &kp UNDER  &kp PLUS   &kp PIPE         &kp LBRC  &kp RBRC  &kp TILDE
                                  &trans    &trans    &trans     &trans     &trans     &trans
            >;
        };
    };
};
